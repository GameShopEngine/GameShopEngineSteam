/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package GameShopEngine;

//import GameShopEngine.LanguageProcessor.GameShopLanguageProcessor;
import GameShopEngine.FileIO.GameShopFileReader;
import GameShopEngine.FileIO.GameShopFileWriter;
import GameShopEngine.Format.ATMS.GameShopATMSArray;
import GameShopEngine.Format.ATMS.GameShopATMSCanvas;
import GameShopEngine.Format.ATMS.GameShopATMSFrame;
import GameShopEngine.Format.ATMS.GameShopATMSLayer;
import GameShopEngine.Format.ATMS.GameShopATMSMap;
//import GameShopEngine.GameShopUI.GameShopUIPolyMesh;
import GameShopEngine.GameShopUI.Widgets.GameShopAlphabet;
import GameShopEngine.GameShopUI.WordProcessor.GameShopWordProcessor;
import GameShopEngine.PolyHash.GameShopObjectHash;
import GameShopEngine.PolyHash.GameShopPolyLineHash;
import GameShopEngine.PolyHash.GameShopPolyMeshHash;
import GameShopEngine.PolyHash.GameShopPolySurfaceHash;
import com.jme3.math.ColorRGBA;
import com.jme3.math.FastMath;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
//import GameShopEngine.UI.Characters.AlphaNumeric.GameShopCharacterUpperCaseA;
//import GameShopEngine.UI.Characters.GameShopCharacter;
//import GameShopEngine.UI.Characters.GameShopCharacterCursor;
//import GameShopEngine.UI.Characters.GameShopCharacterFontHash;
//import GameShopEngine.UI.Components.GameShopUIComponent;
//import GameShopEngine.UI.GameShopUI;
//import GameShopEngine.UI.GameShopUIATMS;
//import GameShopEngine.UI.GameShopUIPolyMesh;
//import de.lessvoid.nifty.Nifty;
import org.lwjgl.*;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;
import org.lwjgl.system.*;

import java.nio.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4f;

import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
//import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL46.*;
import static org.lwjgl.system.MemoryStack.*;
import static org.lwjgl.system.MemoryUtil.*;
//import imgui.ImGui;
//import imgui.app.Application;
//import imgui.app.Configuration;

public class App  {
    
 
    
    GLFWVidMode vidmode;

    // The window handle
	private long window;
        
boolean windowOpen = true;
 
        
        public final float uiScaleZ = -.97f;
        public final float uiScaleY = .56f;
        
        
//        GameShopRuntime gsr = new GameShopRuntime();
//        GameShopWindow gsw = new GameShopWindow();
        
        //int n = 10000;
        
        //GameShopPoly[] gsps = new GameShopPoly[n];
      //  GameShopPoly gsp;// = //The System Resolution must be set before using.  Preferred 1920 x 1080

//Need Element Arrays To Make Squares.  The Most Fundamental Object
//Will Be A Square Based System.  If you want to make a Triangle
//Conjoin Two Points on a Square.  This is so the Texturing will be Easier
         
 //One day there needs to be a way to account for resizing the screen.  For now its 
 //a fullscreen app.  Look to GameShopCamera for more details
        
        
        
        public boolean moveForward = false;
        public boolean moveBackward = false;
        
        
        public void printEnvironmentVariables(){
//            System.out.println("Hello LWJGL " + Version.getVersion() + "!");
//            System.out.println(System.getProperty("java.vendor"));
//            System.out.println(System.getProperty("java.vendor.url"));
//            System.out.println(System.getProperty("java.version"));
//            System.out.println(System.getProperty("sun.arch.data.model"));
        }
        
        public void configureOpenGLHints(){
        
            // Configure GLFW
		glfwDefaultWindowHints(); // optional, the current window hints are already the default
		glfwWindowHint(GLFW_VISIBLE, GLFW_TRUE); // the window will stay hidden after creation
		glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // the window will be resizable
                glfwWindowHint(GLFW_MAXIMIZED, GLFW_TRUE);
             
        }
        
        public void performKeyMappings(){
        
            // Setup a key callback. It will be called every time a key is pressed, repeated or released.
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {
			if ( key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE )
				glfwSetWindowShouldClose(window, true); // We will detect this in the rendering loop
                        //    windowOpen = false;
                        
                        if (key == GLFW_KEY_W && action == GLFW_PRESS)
                            moveForward = true;
                        
                          if (key == GLFW_KEY_S && action == GLFW_PRESS)
                            moveBackward = true;
		});   

               
                // Get the resolution of the primary monitor	
//                GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
////new GameShopPoly( new Vector3f(-1f, -uiScaleY, uiScaleZ), new Vector3f(-1f,uiScaleY,uiScaleZ), new Vector3f(1f,uiScaleY,uiScaleZ), new Vector3f(1f,-uiScaleY,uiScaleZ));
//
//                System.out.println("vidmode: " + vidmode.width() + " " + vidmode.height());
                GameShopCursor.getInstance().screenSize.set(vidmode.width(), vidmode.height());
                GameShopCursor.getInstance().vidModeSize.set(vidmode.width(), vidmode.height());
                glfwSetCursorPosCallback(window, (window, xPos, yPos) -> {
                
                    //do click boolean to optimize this for once click
                   // if (GameShopCursor.getInstance().clicked){
                    
                   // GameShopCursor.getInstance().clicked = false;
                    GameShopCursor.getInstance().cursorPosition.set(xPos, yPos);
                    GameShopCursor.getInstance().convertToGLPosition();
                   // GameShopCursor.getInstance().clicked = false;
                    //}
                });
                
                glfwSetMouseButtonCallback(window, (window, button, action, mods) -> {
                
                    if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS){
                
                    
                        GameShopCursor.getInstance().clicked = true;
                        System.out.println(GameShopCursor.getInstance().cursorPosition);
               
                    } 
//                    
                    else if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_RELEASE){
                    
                        GameShopCursor.getInstance().clicked = false;
                    }
                    
                    
        
                });
        }
        
        
	public void run() {
		
                printEnvironmentVariables();
                
		init();
                //initVulkan();
		loop();

		// Free the window callbacks and destroy the window
		glfwFreeCallbacks(window);
		glfwDestroyWindow(window);

		// Terminate GLFW and free the error callback
		glfwTerminate();
		glfwSetErrorCallback(null).free();
	}

	private void init() {
            
            if(glfwPlatformSupported(GLFW_PLATFORM_X11)) glfwInitHint(GLFW_PLATFORM, GLFW_PLATFORM_X11);
		// Setup an error callback. The default implementation
		// will print the error message in System.err.
		GLFWErrorCallback.createPrint(System.err).set();

		// Initialize GLFW. Most GLFW functions will not work before doing this.
		if ( !glfwInit() )
			throw new IllegalStateException("Unable to initialize GLFW");

		configureOpenGLHints();
                
                vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
 
               // System.out.println("vidmode: " + vidmode.width() + " " + vidmode.height());
                
                   
                //I NEED A METHOD TO PERFECTLY MAP KEYS
                //PROBABLY A SINGLETON
                
		// Create the window
		window = glfwCreateWindow(vidmode.width(), vidmode.height(), "Hello World!", glfwGetPrimaryMonitor(), NULL);
		if ( window == NULL )
			throw new RuntimeException("Failed to create the GLFW window");

		performKeyMappings();
//		// Get the thread stack and push a new frame
//		try ( MemoryStack stack = stackPush() ) {
//			IntBuffer pWidth = stack.mallocInt(1); // int*
//			IntBuffer pHeight = stack.mallocInt(1); // int*
//
//			// Get the window size passed to glfwCreateWindow
//			glfwGetWindowSize(window, pWidth, pHeight);
//
//			
//			// Center the window
//			glfwSetWindowPos(
//				window,
//				(vidmode.width() - pWidth.get(0)) / 2,
//				(vidmode.height() - pHeight.get(0)) / 2
//			);
//		} // the stack frame is popped automatically

		// Make the OpenGL context current
		glfwMakeContextCurrent(window);
                //Nifty nifty = new Nifty(new LwjglRenderDevice(window)); 

		// Enable v-sync
		glfwSwapInterval(1);

		// Make the window visible
		glfwShowWindow(window);
	}
/*
        public String vertexShader = "#version 330\n" +
"\n" +
                "#extension GL_ARB_explicit_uniform_location : require\n"+
"layout (location=0) in vec3 inputPosition;\n" +
"layout (location=1) uniform mat4 projMatrix;\n" +
"layout (location=3) uniform mat4 modelMatrix;\n" +
"layout (location=4) uniform mat4 viewMatrix;\n" +
 "layout (location=2) in vec2 texCoord;\n" +
                "out vec2 outTextCoord;\n" +
"\n" +
"void main()\n" +
"{\n" +
"    gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(inputPosition, 1.0);\n" +
 
//"    gl_Position = projMatrix * viewMatrix  * vec4(inputPosition, 1.0);\n" +
                "   outTextCoord = texCoord;\n" +
"}";
        public String fragmentShader = "#version 330\n" +
"\n" +
"out vec4 fragColor;\n" +
                "in vec2 outTextCoord;\n" +
                "uniform sampler2D txtSampler;\n"+
"\n" +
"void main()\n" +
"{\n" +
"    fragColor = texture(txtSampler, outTextCoord);\n" +
"}";
        
        */

        //GameShopObject gso;
        Vector3f position = new Vector3f(0,0, 0);
        
         
        public void createShaders(){
        
            //System.out.println(System.getProperty("user.dir"));
            
            String vShader ="";
            String fShader ="";
          
            vShader = new GameShopFileReader().readTextFromAssets("/Shaders/GameShopEngine/GameShopEngine.vert");
            fShader = new GameShopFileReader().readTextFromAssets("/Shaders/GameShopEngine/GameShopEngine.frag");
             
             
             GameShopShaderHash.getInstance().addShader("Hello GameShop", vShader, fShader);
             GameShopShaderHash.getInstance().compileShader("Hello GameShop");
         
         
             
             
        }
        
        public void allocateShaderValues(){
        
                 GameShopCameraHub.getInstance().gsCameras.put("UI", new GameShopCamera(position, new Vector3f(), (int)GameShopCursor.getInstance().vidModeSize.x, (int)GameShopCursor.getInstance().vidModeSize.y));
              
                GameShopUniformHub.getInstance().gsUniforms.add(new GameShopUniform(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")));
               
          GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("projMatrix");
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("modelMatrix");
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("viewMatrix");

         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).createUniform("txtSampler");

   
            
        }
        
        public void initGLEnable(){
        
            glEnable(GL_BLEND);
 
            glEnable(GL_DEPTH_TEST);
            
        }
        
        public void useShaderValues(){
        
            
            glUseProgram(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop"));
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("projMatrix", GameShopCameraHub.getInstance().gsCameras.get("UI").projMatrix);
                  GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("modelMatrix", GameShopObjectHash.getInstance().objectHash.get("GameShopUI-Object-1").getModelMatrix());
             GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("viewMatrix", GameShopCameraHub.getInstance().gsCameras.get("UI").getViewMatrix());
         GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("txtSampler", 0);
           
         
            
//          glUseProgram(GameShopShaderHash.getInstance().getGLShaderProgram("GameShopUI"));
////            GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("projMatrix", GameShopCameraHub.getInstance().gsCameras.get("UI").projMatrix);
////            GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("modelMatrix", GameShopObjectHash.getInstance().objectHash.get("UI-Object-1").getModelMatrix());
////            GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("Hello GameShop")).setUniform("viewMatrix", GameShopCameraHub.getInstance().gsCameras.get("UI").getViewMatrix());
//             GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("GameShopUI")).setUniform("m_ColorMap", 0);
//             GameShopUniformHub.getInstance().get(GameShopShaderHash.getInstance().getGLShaderProgram("GameShopUI")).setUniform("m_Color", new Vector4f(1,1,1,1));

         
        }
        
        public void updateMovement(){
        
              if (moveForward){
                     //GameShopCameraHub.getInstance().gsCameras.get("UI").position = new Vector3f(      GameShopCameraHub.getInstance().gsCameras.get("UI").position.add(0,0,-.1f));
                     //GameShopCameraHub.getInstance().gsCameras.get("UI").updateProjMatrix(1920, 1080);//.../.position = new Vector3f(      GameShopCameraHub.getInstance().gsCameras.get("UI").position.add(0,0,-.1f));
                     position = position.add(0, 0, 0.1f);
                        GameShopCameraHub.getInstance().gsCameras.put("UI", new GameShopCamera(position, new Vector3f(), (int)GameShopCursor.getInstance().vidModeSize.x , (int)GameShopCursor.getInstance().vidModeSize.y));
                  
                     moveForward = false;
                     moveBackward = false;
                     //System.out.println("FORWARD");
                    } else if (moveBackward){
                    //GameShopCameraHub.getInstance().gsCameras.get("UI").position = new Vector3f(      GameShopCameraHub.getInstance().gsCameras.get("UI").position.add(0,0,.1f));
                     //                  GameShopCameraHub.getInstance().gsCameras.get("UI").updateProjMatrix(1920, 1080); 
                     position = position.add(0, 0, -0.1f);
                        GameShopCameraHub.getInstance().gsCameras.put("UI", new GameShopCamera(position, new Vector3f(), (int)GameShopCursor.getInstance().vidModeSize.x , (int)GameShopCursor.getInstance().vidModeSize.y));// new GameShopCamera(position, new Vector3f(), 1920, 1080));
                              // System.out.println("BACKWARD");
                               //System.out.println(position);
                     moveForward = false;
                     moveBackward = false;
                    }
                    if (GameShopCursor.getInstance().clicked){
                    //System.out.println("Cursor:" + GameShopCursor.getInstance().cursorPosition);
                    //System.out.println("GL Position: " + GameShopCursor.getInstance().glPosition);
                    GameShopCursor.getInstance().clicked = false;
                    }
        }
        
        
        public void createPolyHashes(){
        
     
            
            GameShopATMS atmsUI = new GameShopATMS("ATMSUI", 1920, 1080, new com.jme3.math.Vector4f[]{new com.jme3.math.Vector4f(0, 1, 0, 1)});
           
           // atmsUI.layer.drawCircle(128, 128, 128, ColorRGBA.White);
            atmsUI.makeATMS();
               //System.out.println(Arrays.toString(atmsUI.layer.outputLayer()));
            GameShopATMSHash.getInstance().dictionary.get("ATMSUI").layer.drawCircle(960,540, 1920, ColorRGBA.fromRGBA255(0,0,255,255));
           // GameShopATMSHash.getInstance().dictionary.get("ATMSUI").layer.drawLine(new Vector2f(960,540), new Vector2f(1920,1080), (short)50, ColorRGBA.fromRGBA255(255,255,255,255));
            //GameShopATMSHash.getInstance().dictionary.get("ATMSUI").layer.drawPolyLine(new GameShopPolyLine(new com.jme3.math.Vector3f[]{new com.jme3.math.Vector3f(0, 0, 0), new com.jme3.math.Vector3f(930, 540, 0), new com.jme3.math.Vector3f(990, 540, 0), new com.jme3.math.Vector3f(1920, 0, 0)},200), (short)5, ColorRGBA.White);
          
           // GameShopATMSHash.getInstance().dictionary.get("ATMSUI").layer.drawCircle(50,50, 15, ColorRGBA.fromRGBA255(0,0,255,255));
          //System.out.println(Arrays.toString(atmsUI.layer.outputLayer()));
             GameShopAlphabet alphabet = new GameShopAlphabet(75,75);
             alphabet.generateCharacters(new com.jme3.math.Vector4f(100,100,100,100));
             GameShopWordProcessor gswp = new GameShopWordProcessor("GAMESHOP", alphabet, GameShopATMSHash.getInstance().dictionary.get("ATMSUI"), new com.jme3.math.Vector2f(0, 500), new com.jme3.math.Vector2f(), 675, 75);
                     
//             GameShopATMSHash.getInstance().updateATMS("ATMSUI", atmsUI);
             float zAxis = 0f;
            GameShopPolyLine[] clUI = new GameShopPolyLine[4];

 
            clUI[0] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{new com.jme3.math.Vector3f(-1.75f, -1f, zAxis), new com.jme3.math.Vector3f(-.33f, -1f, zAxis), new com.jme3.math.Vector3f(.33f, -1f, zAxis), new com.jme3.math.Vector3f(1.75f, -1f, zAxis)}, 2);
            clUI[1] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{new com.jme3.math.Vector3f(-1.75f, -.33f, zAxis), new com.jme3.math.Vector3f(-.33f, -.33f, zAxis), new com.jme3.math.Vector3f(.33f, -.33f, zAxis), new com.jme3.math.Vector3f(1.75f, -.33f, zAxis)}, 2);
            clUI[2] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{new com.jme3.math.Vector3f(-1.75f, .33f, zAxis), new com.jme3.math.Vector3f(-.33f, .33f, zAxis), new com.jme3.math.Vector3f(.33f, .33f, zAxis), new com.jme3.math.Vector3f(1.75f, .33f, zAxis)}, 2);
            clUI[3] = new GameShopPolyLine(new com.jme3.math.Vector3f[]{new com.jme3.math.Vector3f(-1.75f, 1f, zAxis), new com.jme3.math.Vector3f(-.33f, 1f, zAxis), new com.jme3.math.Vector3f(.33f, 1f, zAxis), new com.jme3.math.Vector3f(1.75f, 1f, zAxis)}, 2);

            GameShopPolyLineHash.getInstance().addGameShopPolyLine("GameShopUI-Line-1", clUI[0]);
            GameShopPolyLineHash.getInstance().addGameShopPolyLine("GameShopUI-Line-2", clUI[1]);
            GameShopPolyLineHash.getInstance().addGameShopPolyLine("GameShopUI-Line-3", clUI[2]);
            GameShopPolyLineHash.getInstance().addGameShopPolyLine("GameShopUI-Line-4", clUI[3]);
             
            GameShopPolySurface csUI = new GameShopPolySurface(clUI);
            
            GameShopPolySurfaceHash.getInstance().addGameShopPolySurface("GameShopUI-Surface-1", csUI);
            
            GameShopPolyMesh cmUI = new GameShopPolyMesh(new GameShopPolySurface[]{csUI}, atmsUI);
            GameShopPolyMeshHash.getInstance().addGameShopPolyMesh("GameShopUI-Mesh-1", cmUI);
            
            GameShopObjectHash.getInstance().addGameShopObject("GameShopUI-Object-1", new GameShopObject(cmUI));
            
        }
        GameShopATMSFrame characters;
	private void loop() {
            
            boolean write = false;
            
            if (write){
            
                characters = new GameShopATMSFrame();
                
                characters.frames.add(new GameShopATMSLayer());
                characters.frames.get(0).layers.add(new GameShopATMSCanvas("A"));
                if (characters.frames.get(0).getLayerByName("A") != null) {

                    com.jme3.math.Vector4f color = new com.jme3.math.Vector4f(100,100,100,100);
                    characters.frames.get(0).getLayerByName("A").canvas.add(new GameShopATMSArray());
                    characters.frames.get(0).getLayerByName("A").canvas.add(new GameShopATMSArray());
                    characters.frames.get(0).getLayerByName("A").canvas.add(new GameShopATMSArray());

                    characters.frames.get(0).getLayerByName("A").canvas.get(0).command = "drawLine";
                    characters.frames.get(0).getLayerByName("A").canvas.get(0).arguments.add(new GameShopATMSMap("Location", new com.jme3.math.Vector4f(0, 0, 60, 100), false));
                    characters.frames.get(0).getLayerByName("A").canvas.get(0).arguments.add(new GameShopATMSMap("Radius", new com.jme3.math.Vector4f(5, 0, 0, 0), false));
                    characters.frames.get(0).getLayerByName("A").canvas.get(0).arguments.add(new GameShopATMSMap("Color", color, false));

                    characters.frames.get(0).getLayerByName("A").canvas.get(1).command = "drawLine";
                    characters.frames.get(0).getLayerByName("A").canvas.get(1).arguments.add(new GameShopATMSMap("Location", new com.jme3.math.Vector4f(40, 100, 100, 0), false));
                    characters.frames.get(0).getLayerByName("A").canvas.get(1).arguments.add(new GameShopATMSMap("Radius", new com.jme3.math.Vector4f(5, 0, 0, 0), false));
                    characters.frames.get(0).getLayerByName("A").canvas.get(1).arguments.add(new GameShopATMSMap("Color", color, false));

                    characters.frames.get(0).getLayerByName("A").canvas.get(2).command = "drawLine";
                    characters.frames.get(0).getLayerByName("A").canvas.get(2).arguments.add(new GameShopATMSMap("Location", new com.jme3.math.Vector4f(20, 50, 65, 50), false));
                    characters.frames.get(0).getLayerByName("A").canvas.get(2).arguments.add(new GameShopATMSMap("Radius", new com.jme3.math.Vector4f(5, 0, 0, 0), false));
                    characters.frames.get(0).getLayerByName("A").canvas.get(2).arguments.add(new GameShopATMSMap("Color", color, false));

                }
                //System.out.println(characters);
                
               new GameShopFileWriter().write("temp.font.atms.gameshop", characters);
            } else {
            
              characters = new GameShopFileReader<GameShopATMSFrame>().read("temp.font.atms.gameshop");
                
            }
              // This line is critical for LWJGL's interoperation with GLFW's
		// OpenGL context, or any context that is managed externally.
		// LWJGL detects the context that is current in the current thread,
		// creates the GLCapabilities instance and makes the OpenGL
		// bindings available for use.
		GL.createCapabilities();
                
                //
                glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT, GL_TRUE); // before creating the window
                GLUtil.setupDebugMessageCallback();
               
		// Set the clear color
		glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
                
 
               initGLEnable();
               
               createShaders();
                 
               
               createPolyHashes();
 
              
                for (GameShopPolyMesh gspm: GameShopPolyMeshHash.getInstance().polyMeshHash.values()){
                    gspm.allocateBuffer();
                  
                    //System.out.println("UNIQUE ID " + gspm.atms.name);
                  
                }
                allocateShaderValues();
           
                
                GameShopObjectHash.getInstance().objectHash.get("GameShopUI-Object-1").setPosition(0, 0, 1.75f);
                
                GameShopObjectHash.getInstance().objectHash.get("GameShopUI-Object-1").rotate(0, FastMath.DEG_TO_RAD * 180f, 0);
                GameShopObjectHash.getInstance().objectHash.get("GameShopUI-Object-1").updateModelMatrix();
             
                 

        // Run the rendering loop until the user has attempted to close
		// the window or has pressed the ESCAPE key.
		while ( !glfwWindowShouldClose(window) ) {
             
           
                  updateMovement();
                  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
                  useShaderValues();
                  GL46.glBlendFunc(GL46.GL_SRC_ALPHA, GL46.GL_ONE_MINUS_SRC_ALPHA);

              
        
                 //glEnable(GL_CULL_FACE);
                 //glCullFace(GL_FRONT);
                 //gsui.uiPolyMesh.draw();

                
                 for (GameShopObject gso: GameShopObjectHash.getInstance().objectHash.values()){
                 
                     gso.updateModelMatrix();
                     if (gso.polyMesh != null){
                     
                         gso.polyMesh.draw();
                     }
                 }
 
                 glfwSwapBuffers(window); // swap the color buffers

			
                // Poll for window events. The key callback above will only be
                // invoked during this call.
		glfwPollEvents();
               
		}
    
      
                reportMemory();
                free();
	}
        
        public void reportMemory(){
        
                long maxMemory = Runtime.getRuntime().maxMemory();
                long allocatedMemory = Runtime.getRuntime().totalMemory();
                long freeMemory = Runtime.getRuntime().freeMemory();
                
                System.out.println("max: " + maxMemory);
                System.out.println("allocated: " + allocatedMemory);
                System.out.println("free: " + freeMemory);
        }
        
        public void free(){ 
            
            for (Integer i: GameShopShapeHash.getInstance().shapeHash.values()){
            
            glDeleteBuffers(i);
      
            }
            
            for (Integer i: GameShopVertexHash.getInstance().vertexHash.values()){
            
            glDeleteVertexArrays(i);
            }
         }
         
           
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
       // System.out.println(new App().getGreeting());
       
       App app = new App();
       app.run();
      // launch(app);
       
    }
}
