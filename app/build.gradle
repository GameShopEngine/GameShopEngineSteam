/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}
 
project.ext.lwjglVersion = "3.3.4"
project.ext.jomlVersion = "1.10.7"
project.ext.jomlprimitivesVersion = "1.10.0"
project.ext.steamworks4jVersion = "1.9.0"
project.ext.steamworks4jserverVersion = "1.9.0"
project.ext.lwjglNatives = "natives-linux"

project.ext.imguiVersion = "1.87.7"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

   // implementation 'com.github.nifty-gui:nifty-lwjgl3-renderer:1.4.3'


//    implementation "io.github.spair:imgui-java-app:${imguiVersion}"

  //   implementation "io.github.spair:imgui-java-binding:$imguiVersion"
   // implementation "io.github.spair:imgui-java-lwjgl3:$imguiVersion"
    
    //implementation "io.github.spair:imgui-java-natives-linux:$imguiVersion"
    
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
    
    	implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

	implementation "org.lwjgl:lwjgl"
	implementation "org.lwjgl:lwjgl-glfw"
	implementation "org.lwjgl:lwjgl-openal"
	implementation "org.lwjgl:lwjgl-opengl"
        implementation "org.lwjgl:lwjgl-vulkan"
        implementation "org.lwjgl:lwjgl"
        
	implementation "org.lwjgl:lwjgl-jemalloc"
	runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-jemalloc::$lwjglNatives"
        
	runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
	implementation "org.joml:joml:${jomlVersion}"
	implementation "org.joml:joml-primitives:${jomlprimitivesVersion}"
	implementation "com.code-disaster.steamworks4j:steamworks4j:${steamworks4jVersion}"
	implementation "com.code-disaster.steamworks4j:steamworks4j-server:${steamworks4jserverVersion}"

    //JME for FastMath
    
    implementation "org.jmonkeyengine:jme3-core:3.3.2-stable"

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

//application {
    
    // Define the main class for the application.
    //mainClass = 'GameShopEngine.App'
    //applicationDefaultJvmArgs = ["-Xms:1024M -Xmx:2048M -d64 -XX:+UseCompressedOops -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n"]

  //  jvmArgs="-Xms:1024M -Xmx:2048M -d64 -XX:+UseCompressedOops -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n"
//}

task runApp(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath

  mainClass = 'GameShopEngine.App'

   List<String> argumentList = new ArrayList<String>();
    argumentList.add('-Xms13824m')
    argumentList.add('-Xmx14336m')
    allJvmArgs = argumentList
  // arguments to pass to the application
  //args 'appArg1'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
